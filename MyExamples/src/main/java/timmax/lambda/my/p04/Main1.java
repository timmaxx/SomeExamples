package timmax.lambda.my.p04;

public class Main1 {
    public static void main(String[] args) {
/*
        execute(
            //  Полный вариант - без лямбды (но с применением анонимного класса).
            //      Здесь одновременно и объявляется класс (он анонимный)
            //      и сразу-же вызывается его конструктор.
                new I1() {
                    @Override
                    public void a(int i) {
                        System.out.println("a. i = " + i);
                    }
                },
                123
        );
*/

/*
        execute(
                //  Лямбда полная.
                //      Её применение возможно, т.к. интерфейс был функциональным.
                (int i) -> {
                    System.out.println("a. i = " + i);
                },
                123
        );
*/

/*
        execute(
            //  Лямбда чуть-чуть не полная. Тип параметра не указан.
            //      Её применение возможно, т.к. тип параметра и так есть в методе интерфейса.
                (i) -> {
                    System.out.println("a. i = " + i);
                },
                123
        );
*/

/*
        execute(
            //  Лямбда немного сокращённая за счёт того, что метод имеет один параметр.
            //      Тогда перечисление аргументов слева от '->' можно написать без скобок (скобки круглые).
                i -> {
                    System.out.println("a. i = " + i);
                },
                123
        );
*/

/*
        execute(
            //  Лямбда немного сокращённая за счёт того, что метод имеет только одну строку (т.е. ';' один).
            //      Тогда блок кода, написанный справа от '->' можно написать без скобок (скобки фигурные) и без единственного ';'.
                (x) -> System.out.println("a. i = " + x),
                123
        );
*/

        execute(
                //  Лямбда полностью сокращённая за счёт того, что оба предыдущих условия выполнены.
                x -> System.out.println("a. i = " + x),
                123
        );
/*
        execute(
                //  Это тоже сокращение, но:
                //      -
                //      -
                System.out::println, 123
        );
*/
    }

    private static void execute(I1 i1, int ii) {
        System.out.println("start runner");
        i1.a(ii);
        System.out.println("end runner");
    }
}
